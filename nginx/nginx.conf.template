server {
    listen 80;
    server_name ${REACT_APP_URL};
    root /usr/share/nginx/html;
    index index.html index.htm;
    location / {
        set $prerender 0;
        if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
            set $prerender 0;
        }
        # Resolve using Kubernetes DNS server to force DNS resolution and prevent caching of IPs
        resolver kube-dns.kube-system.svc.cluster.local;
        if ($prerender = 1) {
            # Setting prerender as a variable forces DNS resolution since Nginx caches IPs and doesnt play well with load balancing
            set $prerender distnode-prerender-service.distnode.svc.cluster.local:3003;
            rewrite .* /$server_name$request_uri? break;
            proxy_pass http://$prerender;
        }
        try_files $uri $uri/ /index.html =404;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
